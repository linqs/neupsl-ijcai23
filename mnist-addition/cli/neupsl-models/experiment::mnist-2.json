{
  "options": {
    "runtime.db.intids": true,
    "runtime.log.level": "TRACE",
    "runtime.learn.method": "Energy",
    "categoricalevaluator.defaultpredicate": "ImageSum",
    "admmreasoner.computeperiod": 100,
    "admmreasoner.epsilonabs": 1.0e-6,
    "admmreasoner.epsilonrel": 1.0e-4,
    "admmreasoner.maxiterations": 100,
    "admmreasoner.stepsize": 1.0,
    "gradientdescent.numsteps": 2500,
    "gradientdescent.runfulliterations": true,
    "gradientdescent.stepsize": 1.0e-14
  },
  "rules": [
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * NumberSum(X, Y, Z) + NeuralClassifier(ImageId2, X) + NeuralClassifier(ImageId4, Y) <= ImageDigitSum(ImageId2, ImageId4, Z) + 1.0 ^2",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * NumberSum(X, Y, Z) + NeuralClassifier(ImageId2, X) + ImageDigitSum(ImageId2, ImageId4, Z) <= NeuralClassifier(ImageId4, Y) + 1.0 ^2",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * NumberSum(X, Y, Z) + NeuralClassifier(ImageId4, Y) + ImageDigitSum(ImageId2, ImageId4, Z) <= NeuralClassifier(ImageId2, X) + 1.0 ^2",

    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * NumberSum(X, Y, Z) + NeuralClassifier(ImageId1, X) + NeuralClassifier(ImageId3, Y) <= ImageDigitSum(ImageId1, ImageId3, Z) + 1.0 ^2",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * NumberSum(X, Y, Z) + NeuralClassifier(ImageId1, X) + ImageDigitSum(ImageId1, ImageId3, Z) <= NeuralClassifier(ImageId3, Y) + 1.0 ^2",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * NumberSum(X, Y, Z) + NeuralClassifier(ImageId3, Y) + ImageDigitSum(ImageId1, ImageId3, Z) <= NeuralClassifier(ImageId1, X) + 1.0 ^2",

    "ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) & ImageDigitSum(ImageId2, ImageId4, Z_1) & ImageDigitSum(ImageId1, ImageId3, Z_10) & PlacedNumberSum(Z_10, Z_1, Z) -> ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) .",
    "ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) & ImageDigitSum(ImageId2, ImageId4, Z_1) & ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) & PlacedNumberSum(Z_10, Z_1, Z) -> ImageDigitSum(ImageId1, ImageId3, Z_10) .",
    "ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) & ImageDigitSum(ImageId1, ImageId3, Z_10) & ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) & PlacedNumberSum(Z_10, Z_1, Z) -> ImageDigitSum(ImageId2, ImageId4, Z_1) .",

    "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + ImageDigitSum(ImageId2, ImageId4, +Z_1) >= ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) . {Z_1: PossibleOnesSums(Z_1, Z)}",
    "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + ImageDigitSum(ImageId1, ImageId3, +Z_10) >= ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) . {Z_10: PossibleTensSums(Z_10, Z)}",

    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId2, +X) >= ImageDigitSum(ImageId2, ImageId4, Z) {X: PossibleDigits(X, Z)}",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId4, +X) >= ImageDigitSum(ImageId2, ImageId4, Z) {X: PossibleDigits(X, Z)}",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId1, +X) >= ImageDigitSum(ImageId1, ImageId3, Z) {X: PossibleDigits(X, Z)}",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId3, +X) >= ImageDigitSum(ImageId1, ImageId3, Z) {X: PossibleDigits(X, Z)}",

    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId1, +X) >= ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) {X: PossibleTensDigits(X, Z)}",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId3, +X) >= ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) {X: PossibleTensDigits(X, Z)}",

    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId2, +X) >= ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) {X: PossibleOnesDigits(X, Z)}",
    "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId4, +X) >= ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) {X: PossibleOnesDigits(X, Z)}",

    "ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, +Number) = 1 .",
    "ImageDigitSum(ImageIdX, ImageIdY, +Number) = 1 .",

    "0.1: NeuralClassifier(+ImageId, X) / |ImageId| =  0.1 ^2"
  ],
  "predicates": {
    "NeuralClassifier/2": {
      "type": "DeepPredicate",
      "options": {
        "model-path": "../scripts/neupsl-model.py::MNISTAdditionModel",
        "entity-data-map-path": "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/entity-data-map.txt",
        "entity-argument-indexes": "0",
        "class-size": 10,
        "save-path": "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/saved-networks/nesy-trained-tf",
        "alpha": 1.0,
        "learning-rate": 1.0e-3
      },
      "targets": {
        "learn": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-target-train.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-target-test.txt"
        ]
      }
    },
    "ImageSum/5": {
      "evaluations": [
        {
          "evaluator": "CategoricalEvaluator",
          "options": {
            "categoricalevaluator.categoryindexes": 4
          }
        }
      ],
      "targets": {
        "learn": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-sum-target-train.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-sum-target-test.txt"
        ]
      },
      "truth": {
        "learn": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-sum-truth-train.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-sum-truth-test.txt"
        ]
      }
    },
    "ImageDigitSum/3": {
      "targets": {
        "learn": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-digit-sum-target-train.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-digit-sum-target-test.txt"
        ]
      }
    },
    "ImageSumBlock/4": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-sum-block-train.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/split::0/train-size::0080/overlap::1.00/image-sum-block-test.txt"
        ]
      }
    },
    "NumberSum/3": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-2/number-sum.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/number-sum.txt"
        ]
      }
    },
    "PlacedNumberSum/3": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-2/placed-number-sums.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/placed-number-sums.txt"
        ]
      }
    },
    "PossibleDigits/2": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-2/possible-digits.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/possible-digits.txt"
        ]
      }
    },
    "PossibleOnesDigits/2": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-2/possible-ones-digits.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/possible-ones-digits.txt"
        ]
      }
    },
    "PossibleOnesSums/2": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-2/possible-ones-sums.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/possible-ones-sums.txt"
        ]
      }
    },
    "PossibleTensDigits/2": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-2/possible-tens-digits.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/possible-tens-digits.txt"
        ]
      }
    },
    "PossibleTensSums/2": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-2/possible-tens-sums.txt"
        ],
        "infer": [
          "../data/experiment::mnist-2/possible-tens-sums.txt"
        ]
      }
    }
  }
}