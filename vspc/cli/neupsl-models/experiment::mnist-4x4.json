{
  "options": {
    "runtime.db.intids": true,
    "runtime.log.level": "TRACE",
    "runtime.learn.method": "Energy",
    "runtime.inference.clearrules": true,
    "categoricalevaluator.defaultpredicate": "ImageSum",
    "admmreasoner.computeperiod": 100,
    "admmreasoner.epsilonabs": 1.0e-6,
    "admmreasoner.epsilonrel": 1.0e-4,
    "admmreasoner.stepsize": 1.0,
    "gradientdescent.numsteps": 1000,
    "gradientdescent.runfulliterations": true,
    "gradientdescent.stepsize": 1.0e-14
  },
  "infer": {
    "options": {
      "admmreasoner.maxiterations": 5000
    },
    "rules": [
      "NeuralClassifier(Image, X, Y, Num) = PredictedNumber(Image, X, Y, Num) .",

      "NeuralClassifier(Image, X, +Y, Num) / |Y| <= PuzzleRow(Image, X, Num) + 0.25 .",
      "NeuralClassifier(Image, +X, Y, Num) / |X| <= PuzzleColumn(Image, Y, Num) + 0.25 .",
      "PuzzleRow(Image, X, +Num1) + PuzzleColumn(Image, Y, +Num2) <= Puzzle(Image) .",

      "1.0: PuzzleRow(Image, X, Num) = 0.0 ^2",
      "1.0: PuzzleColumn(Image, X, Num) = 0.0 ^2",
      "1.0: Puzzle(Image) = 0.0 ^2"
    ]
  },
  "learn": {
    "options": {
      "admmreasoner.maxiterations": 1000
    },
    "rules": [
      "1000.0: FirstPuzzle(Puzzle, X, Y, Number) - NeuralClassifier(Puzzle, X, Y, Number) = 0.0",

      "1.0: NeuralClassifier(Puzzle, X, Y, +Number) = 1.0",
      "1.0: NeuralClassifier(Puzzle, +X, Y, Number) = 1.0",
      "1.0: NeuralClassifier(Puzzle, X, +Y, Number) = 1.0",

      "1.0: NeuralClassifier(Puzzle, '0', '0', Number) + NeuralClassifier(Puzzle, '0', '1', Number) + NeuralClassifier(Puzzle, '1', '0', Number) + NeuralClassifier(Puzzle, '1', '1', Number) = 1.0",
      "1.0: NeuralClassifier(Puzzle, '2', '0', Number) + NeuralClassifier(Puzzle, '2', '1', Number) + NeuralClassifier(Puzzle, '3', '0', Number) + NeuralClassifier(Puzzle, '3', '1', Number) = 1.0",
      "1.0: NeuralClassifier(Puzzle, '0', '2', Number) + NeuralClassifier(Puzzle, '0', '3', Number) + NeuralClassifier(Puzzle, '1', '2', Number) + NeuralClassifier(Puzzle, '1', '3', Number) = 1.0",
      "1.0: NeuralClassifier(Puzzle, '2', '2', Number) + NeuralClassifier(Puzzle, '2', '3', Number) + NeuralClassifier(Puzzle, '3', '2', Number) + NeuralClassifier(Puzzle, '3', '3', Number) = 1.0"
    ]
  },
  "predicates": {
    "NeuralClassifier/4": {
      "type": "DeepPredicate",
      "options": {
        "model-path": "../scripts/neupsl-model.py::VSPCModel",
        "entity-data-map-path": "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/entity-data-map-train.txt",
        "inference::entity-data-map-path": "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/entity-data-map-test.txt",
        "entity-argument-indexes": "0,1,2",
        "class-size": 4,
        "save-path": "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/saved-networks/nesy-trained-tf",
        "learning-rate": 1.0e-3
      },
      "targets": {
        "learn": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/digit-targets-train.txt"
        ],
        "infer": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/digit-targets-test.txt"
        ]
      }
    },
    "FirstPuzzle/4": {
      "observations": {
        "learn": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/first-puzzle-observation.txt"
        ]
      }
    },
    "PredictedNumber/4": {
      "evaluations": [
        {
          "evaluator": "CategoricalEvaluator",
          "options": {
            "categoricalevaluator.categoryindexes": 3
          }
        }
      ],
      "targets": {
        "infer": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/digit-targets-test.txt"
        ]
      },
      "truth": {
        "infer": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/digit-mapped-truth-test.txt"
        ]
      }
    },
    "Puzzle/1": {
      "evaluations": [
        {
          "evaluator": "DiscreteEvaluator",
          "options": {
            "discreteevaluator.threshold": 0.2
          }
        },
        {
          "evaluator": "AUCEvaluator",
          "options": {
            "aucevaluator.threshold": 0.2
          }
        }
      ],
      "targets": {
        "infer": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/puzzle-targets.txt"
        ]
      },
      "truth": {
        "infer": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/puzzle-truth.txt"
        ]
      }
    },
    "PuzzleRow/3": {
      "targets": {
        "infer": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/row-column-targets.txt"
        ]
      }
    },
    "PuzzleColumn/3": {
      "targets": {
        "infer": [
          "../data/experiment::mnist-4x4/split::00/positive-train-size::0002/overlap-percent::0.00/row-column-targets.txt"
        ]
      }
    }
  }
}